// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.tensorflow.framework.tensor

/** Protocol buffer representing a tensor.
  *
  * @param tensorShape
  *   Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
  * @param versionNumber
  *   Version number.
  *  
  *   In version 0, if the "repeated xxx" representations contain only one
  *   element, that element is repeated to fill the shape.  This makes it easy
  *   to represent a constant Tensor with a single value.
  * @param tensorContent
  *   Serialized raw tensor content from either Tensor::AsProtoTensorContent or
  *   memcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation
  *   can be used for all tensor types. The purpose of this representation is to
  *   reduce serialization overhead during RPC call by avoiding serialization of
  *   many repeated small items.
  * @param halfVal
  *   DT_HALF, DT_BFLOAT16. Note that since protobuf has no int16 type, we'll
  *   have some pointless zero padding for each value here.
  * @param floatVal
  *   DT_FLOAT.
  * @param doubleVal
  *   DT_DOUBLE.
  * @param intVal
  *   DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
  * @param stringVal
  *   DT_STRING
  * @param scomplexVal
  *   DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
  *   and imaginary parts of i-th single precision complex.
  * @param int64Val
  *   DT_INT64
  * @param boolVal
  *   DT_BOOL
  * @param dcomplexVal
  *   DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real
  *   and imaginary parts of i-th double precision complex.
  * @param resourceHandleVal
  *   DT_RESOURCE
  * @param variantVal
  *   DT_VARIANT
  * @param uint32Val
  *   DT_UINT32
  * @param uint64Val
  *   DT_UINT64
  */
@SerialVersionUID(0L)
final case class TensorProto(
    dtype: org.tensorflow.framework.types.DataType = org.tensorflow.framework.types.DataType.DT_INVALID,
    tensorShape: _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto] = _root_.scala.None,
    versionNumber: _root_.scala.Int = 0,
    tensorContent: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    halfVal: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    floatVal: _root_.scala.Seq[_root_.scala.Float] = _root_.scala.Seq.empty,
    doubleVal: _root_.scala.Seq[_root_.scala.Double] = _root_.scala.Seq.empty,
    intVal: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    stringVal: _root_.scala.Seq[_root_.com.google.protobuf.ByteString] = _root_.scala.Seq.empty,
    scomplexVal: _root_.scala.Seq[_root_.scala.Float] = _root_.scala.Seq.empty,
    int64Val: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    boolVal: _root_.scala.Seq[_root_.scala.Boolean] = _root_.scala.Seq.empty,
    dcomplexVal: _root_.scala.Seq[_root_.scala.Double] = _root_.scala.Seq.empty,
    resourceHandleVal: _root_.scala.Seq[org.tensorflow.framework.resource_handle.ResourceHandleProto] = _root_.scala.Seq.empty,
    variantVal: _root_.scala.Seq[org.tensorflow.framework.tensor.VariantTensorDataProto] = _root_.scala.Seq.empty,
    uint32Val: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    uint64Val: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TensorProto] {
    private[this] def halfValSerializedSize = {
      if (__halfValSerializedSizeField == 0) __halfValSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        halfVal.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __halfValSerializedSizeField
    }
    @transient private[this] var __halfValSerializedSizeField: _root_.scala.Int = 0
    private[this] def floatValSerializedSize = {
      4 * floatVal.size
    }
    private[this] def doubleValSerializedSize = {
      8 * doubleVal.size
    }
    private[this] def intValSerializedSize = {
      if (__intValSerializedSizeField == 0) __intValSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        intVal.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __intValSerializedSizeField
    }
    @transient private[this] var __intValSerializedSizeField: _root_.scala.Int = 0
    private[this] def scomplexValSerializedSize = {
      4 * scomplexVal.size
    }
    private[this] def int64ValSerializedSize = {
      if (__int64ValSerializedSizeField == 0) __int64ValSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        int64Val.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(__i))
        __s
      }
      __int64ValSerializedSizeField
    }
    @transient private[this] var __int64ValSerializedSizeField: _root_.scala.Int = 0
    private[this] def boolValSerializedSize = {
      1 * boolVal.size
    }
    private[this] def dcomplexValSerializedSize = {
      8 * dcomplexVal.size
    }
    private[this] def uint32ValSerializedSize = {
      if (__uint32ValSerializedSizeField == 0) __uint32ValSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        uint32Val.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __uint32ValSerializedSizeField
    }
    @transient private[this] var __uint32ValSerializedSizeField: _root_.scala.Int = 0
    private[this] def uint64ValSerializedSize = {
      if (__uint64ValSerializedSizeField == 0) __uint64ValSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        uint64Val.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt64SizeNoTag(__i))
        __s
      }
      __uint64ValSerializedSizeField
    }
    @transient private[this] var __uint64ValSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = dtype.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      if (tensorShape.isDefined) {
        val __value = tensorShape.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = versionNumber
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      
      {
        val __value = tensorContent
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, __value)
        }
      };
      if (halfVal.nonEmpty) {
        val __localsize = halfValSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (floatVal.nonEmpty) {
        val __localsize = floatValSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (doubleVal.nonEmpty) {
        val __localsize = doubleValSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (intVal.nonEmpty) {
        val __localsize = intValSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      stringVal.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(8, __value)
      }
      if (scomplexVal.nonEmpty) {
        val __localsize = scomplexValSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (int64Val.nonEmpty) {
        val __localsize = int64ValSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (boolVal.nonEmpty) {
        val __localsize = boolValSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (dcomplexVal.nonEmpty) {
        val __localsize = dcomplexValSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      resourceHandleVal.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      variantVal.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (uint32Val.nonEmpty) {
        val __localsize = uint32ValSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (uint64Val.nonEmpty) {
        val __localsize = uint64ValSerializedSize
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = dtype.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      tensorShape.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = versionNumber
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      {
        val __v = tensorContent
        if (!__v.isEmpty) {
          _output__.writeBytes(4, __v)
        }
      };
      if (floatVal.nonEmpty) {
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(floatValSerializedSize)
        floatVal.foreach(_output__.writeFloatNoTag)
      };
      if (doubleVal.nonEmpty) {
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(doubleValSerializedSize)
        doubleVal.foreach(_output__.writeDoubleNoTag)
      };
      if (intVal.nonEmpty) {
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(intValSerializedSize)
        intVal.foreach(_output__.writeInt32NoTag)
      };
      stringVal.foreach { __v =>
        val __m = __v
        _output__.writeBytes(8, __m)
      };
      if (scomplexVal.nonEmpty) {
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(scomplexValSerializedSize)
        scomplexVal.foreach(_output__.writeFloatNoTag)
      };
      if (int64Val.nonEmpty) {
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(int64ValSerializedSize)
        int64Val.foreach(_output__.writeInt64NoTag)
      };
      if (boolVal.nonEmpty) {
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(boolValSerializedSize)
        boolVal.foreach(_output__.writeBoolNoTag)
      };
      if (dcomplexVal.nonEmpty) {
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(dcomplexValSerializedSize)
        dcomplexVal.foreach(_output__.writeDoubleNoTag)
      };
      if (halfVal.nonEmpty) {
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(halfValSerializedSize)
        halfVal.foreach(_output__.writeInt32NoTag)
      };
      resourceHandleVal.foreach { __v =>
        val __m = __v
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      variantVal.foreach { __v =>
        val __m = __v
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (uint32Val.nonEmpty) {
        _output__.writeTag(16, 2)
        _output__.writeUInt32NoTag(uint32ValSerializedSize)
        uint32Val.foreach(_output__.writeUInt32NoTag)
      };
      if (uint64Val.nonEmpty) {
        _output__.writeTag(17, 2)
        _output__.writeUInt32NoTag(uint64ValSerializedSize)
        uint64Val.foreach(_output__.writeUInt64NoTag)
      };
      unknownFields.writeTo(_output__)
    }
    def withDtype(__v: org.tensorflow.framework.types.DataType): TensorProto = copy(dtype = __v)
    def getTensorShape: org.tensorflow.framework.tensor_shape.TensorShapeProto = tensorShape.getOrElse(org.tensorflow.framework.tensor_shape.TensorShapeProto.defaultInstance)
    def clearTensorShape: TensorProto = copy(tensorShape = _root_.scala.None)
    def withTensorShape(__v: org.tensorflow.framework.tensor_shape.TensorShapeProto): TensorProto = copy(tensorShape = Option(__v))
    def withVersionNumber(__v: _root_.scala.Int): TensorProto = copy(versionNumber = __v)
    def withTensorContent(__v: _root_.com.google.protobuf.ByteString): TensorProto = copy(tensorContent = __v)
    def clearHalfVal = copy(halfVal = _root_.scala.Seq.empty)
    def addHalfVal(__vs: _root_.scala.Int*): TensorProto = addAllHalfVal(__vs)
    def addAllHalfVal(__vs: Iterable[_root_.scala.Int]): TensorProto = copy(halfVal = halfVal ++ __vs)
    def withHalfVal(__v: _root_.scala.Seq[_root_.scala.Int]): TensorProto = copy(halfVal = __v)
    def clearFloatVal = copy(floatVal = _root_.scala.Seq.empty)
    def addFloatVal(__vs: _root_.scala.Float*): TensorProto = addAllFloatVal(__vs)
    def addAllFloatVal(__vs: Iterable[_root_.scala.Float]): TensorProto = copy(floatVal = floatVal ++ __vs)
    def withFloatVal(__v: _root_.scala.Seq[_root_.scala.Float]): TensorProto = copy(floatVal = __v)
    def clearDoubleVal = copy(doubleVal = _root_.scala.Seq.empty)
    def addDoubleVal(__vs: _root_.scala.Double*): TensorProto = addAllDoubleVal(__vs)
    def addAllDoubleVal(__vs: Iterable[_root_.scala.Double]): TensorProto = copy(doubleVal = doubleVal ++ __vs)
    def withDoubleVal(__v: _root_.scala.Seq[_root_.scala.Double]): TensorProto = copy(doubleVal = __v)
    def clearIntVal = copy(intVal = _root_.scala.Seq.empty)
    def addIntVal(__vs: _root_.scala.Int*): TensorProto = addAllIntVal(__vs)
    def addAllIntVal(__vs: Iterable[_root_.scala.Int]): TensorProto = copy(intVal = intVal ++ __vs)
    def withIntVal(__v: _root_.scala.Seq[_root_.scala.Int]): TensorProto = copy(intVal = __v)
    def clearStringVal = copy(stringVal = _root_.scala.Seq.empty)
    def addStringVal(__vs: _root_.com.google.protobuf.ByteString*): TensorProto = addAllStringVal(__vs)
    def addAllStringVal(__vs: Iterable[_root_.com.google.protobuf.ByteString]): TensorProto = copy(stringVal = stringVal ++ __vs)
    def withStringVal(__v: _root_.scala.Seq[_root_.com.google.protobuf.ByteString]): TensorProto = copy(stringVal = __v)
    def clearScomplexVal = copy(scomplexVal = _root_.scala.Seq.empty)
    def addScomplexVal(__vs: _root_.scala.Float*): TensorProto = addAllScomplexVal(__vs)
    def addAllScomplexVal(__vs: Iterable[_root_.scala.Float]): TensorProto = copy(scomplexVal = scomplexVal ++ __vs)
    def withScomplexVal(__v: _root_.scala.Seq[_root_.scala.Float]): TensorProto = copy(scomplexVal = __v)
    def clearInt64Val = copy(int64Val = _root_.scala.Seq.empty)
    def addInt64Val(__vs: _root_.scala.Long*): TensorProto = addAllInt64Val(__vs)
    def addAllInt64Val(__vs: Iterable[_root_.scala.Long]): TensorProto = copy(int64Val = int64Val ++ __vs)
    def withInt64Val(__v: _root_.scala.Seq[_root_.scala.Long]): TensorProto = copy(int64Val = __v)
    def clearBoolVal = copy(boolVal = _root_.scala.Seq.empty)
    def addBoolVal(__vs: _root_.scala.Boolean*): TensorProto = addAllBoolVal(__vs)
    def addAllBoolVal(__vs: Iterable[_root_.scala.Boolean]): TensorProto = copy(boolVal = boolVal ++ __vs)
    def withBoolVal(__v: _root_.scala.Seq[_root_.scala.Boolean]): TensorProto = copy(boolVal = __v)
    def clearDcomplexVal = copy(dcomplexVal = _root_.scala.Seq.empty)
    def addDcomplexVal(__vs: _root_.scala.Double*): TensorProto = addAllDcomplexVal(__vs)
    def addAllDcomplexVal(__vs: Iterable[_root_.scala.Double]): TensorProto = copy(dcomplexVal = dcomplexVal ++ __vs)
    def withDcomplexVal(__v: _root_.scala.Seq[_root_.scala.Double]): TensorProto = copy(dcomplexVal = __v)
    def clearResourceHandleVal = copy(resourceHandleVal = _root_.scala.Seq.empty)
    def addResourceHandleVal(__vs: org.tensorflow.framework.resource_handle.ResourceHandleProto*): TensorProto = addAllResourceHandleVal(__vs)
    def addAllResourceHandleVal(__vs: Iterable[org.tensorflow.framework.resource_handle.ResourceHandleProto]): TensorProto = copy(resourceHandleVal = resourceHandleVal ++ __vs)
    def withResourceHandleVal(__v: _root_.scala.Seq[org.tensorflow.framework.resource_handle.ResourceHandleProto]): TensorProto = copy(resourceHandleVal = __v)
    def clearVariantVal = copy(variantVal = _root_.scala.Seq.empty)
    def addVariantVal(__vs: org.tensorflow.framework.tensor.VariantTensorDataProto*): TensorProto = addAllVariantVal(__vs)
    def addAllVariantVal(__vs: Iterable[org.tensorflow.framework.tensor.VariantTensorDataProto]): TensorProto = copy(variantVal = variantVal ++ __vs)
    def withVariantVal(__v: _root_.scala.Seq[org.tensorflow.framework.tensor.VariantTensorDataProto]): TensorProto = copy(variantVal = __v)
    def clearUint32Val = copy(uint32Val = _root_.scala.Seq.empty)
    def addUint32Val(__vs: _root_.scala.Int*): TensorProto = addAllUint32Val(__vs)
    def addAllUint32Val(__vs: Iterable[_root_.scala.Int]): TensorProto = copy(uint32Val = uint32Val ++ __vs)
    def withUint32Val(__v: _root_.scala.Seq[_root_.scala.Int]): TensorProto = copy(uint32Val = __v)
    def clearUint64Val = copy(uint64Val = _root_.scala.Seq.empty)
    def addUint64Val(__vs: _root_.scala.Long*): TensorProto = addAllUint64Val(__vs)
    def addAllUint64Val(__vs: Iterable[_root_.scala.Long]): TensorProto = copy(uint64Val = uint64Val ++ __vs)
    def withUint64Val(__v: _root_.scala.Seq[_root_.scala.Long]): TensorProto = copy(uint64Val = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = dtype.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => tensorShape.orNull
        case 3 => {
          val __t = versionNumber
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = tensorContent
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 13 => halfVal
        case 5 => floatVal
        case 6 => doubleVal
        case 7 => intVal
        case 8 => stringVal
        case 9 => scomplexVal
        case 10 => int64Val
        case 11 => boolVal
        case 12 => dcomplexVal
        case 14 => resourceHandleVal
        case 15 => variantVal
        case 16 => uint32Val
        case 17 => uint64Val
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(dtype.scalaValueDescriptor)
        case 2 => tensorShape.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PInt(versionNumber)
        case 4 => _root_.scalapb.descriptors.PByteString(tensorContent)
        case 13 => _root_.scalapb.descriptors.PRepeated(halfVal.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(floatVal.iterator.map(_root_.scalapb.descriptors.PFloat(_)).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(doubleVal.iterator.map(_root_.scalapb.descriptors.PDouble(_)).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(intVal.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 8 => _root_.scalapb.descriptors.PRepeated(stringVal.iterator.map(_root_.scalapb.descriptors.PByteString(_)).toVector)
        case 9 => _root_.scalapb.descriptors.PRepeated(scomplexVal.iterator.map(_root_.scalapb.descriptors.PFloat(_)).toVector)
        case 10 => _root_.scalapb.descriptors.PRepeated(int64Val.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 11 => _root_.scalapb.descriptors.PRepeated(boolVal.iterator.map(_root_.scalapb.descriptors.PBoolean(_)).toVector)
        case 12 => _root_.scalapb.descriptors.PRepeated(dcomplexVal.iterator.map(_root_.scalapb.descriptors.PDouble(_)).toVector)
        case 14 => _root_.scalapb.descriptors.PRepeated(resourceHandleVal.iterator.map(_.toPMessage).toVector)
        case 15 => _root_.scalapb.descriptors.PRepeated(variantVal.iterator.map(_.toPMessage).toVector)
        case 16 => _root_.scalapb.descriptors.PRepeated(uint32Val.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 17 => _root_.scalapb.descriptors.PRepeated(uint64Val.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.tensorflow.framework.tensor.TensorProto
    // @@protoc_insertion_point(GeneratedMessage[tensorflow.TensorProto])
}

object TensorProto extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.tensor.TensorProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.tensor.TensorProto] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.tensor.TensorProto = {
    var __dtype: org.tensorflow.framework.types.DataType = org.tensorflow.framework.types.DataType.DT_INVALID
    var __tensorShape: _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto] = _root_.scala.None
    var __versionNumber: _root_.scala.Int = 0
    var __tensorContent: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    val __halfVal: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    val __floatVal: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float]
    val __doubleVal: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double]
    val __intVal: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    val __stringVal: _root_.scala.collection.immutable.VectorBuilder[_root_.com.google.protobuf.ByteString] = new _root_.scala.collection.immutable.VectorBuilder[_root_.com.google.protobuf.ByteString]
    val __scomplexVal: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Float]
    val __int64Val: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    val __boolVal: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Boolean] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Boolean]
    val __dcomplexVal: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double]
    val __resourceHandleVal: _root_.scala.collection.immutable.VectorBuilder[org.tensorflow.framework.resource_handle.ResourceHandleProto] = new _root_.scala.collection.immutable.VectorBuilder[org.tensorflow.framework.resource_handle.ResourceHandleProto]
    val __variantVal: _root_.scala.collection.immutable.VectorBuilder[org.tensorflow.framework.tensor.VariantTensorDataProto] = new _root_.scala.collection.immutable.VectorBuilder[org.tensorflow.framework.tensor.VariantTensorDataProto]
    val __uint32Val: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    val __uint64Val: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __dtype = org.tensorflow.framework.types.DataType.fromValue(_input__.readEnum())
        case 18 =>
          __tensorShape = Option(__tensorShape.fold(_root_.scalapb.LiteParser.readMessage[org.tensorflow.framework.tensor_shape.TensorShapeProto](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __versionNumber = _input__.readInt32()
        case 34 =>
          __tensorContent = _input__.readBytes()
        case 104 =>
          __halfVal += _input__.readInt32()
        case 106 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __halfVal += _input__.readInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 45 =>
          __floatVal += _input__.readFloat()
        case 42 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __floatVal += _input__.readFloat()
          }
          _input__.popLimit(oldLimit)
        }
        case 49 =>
          __doubleVal += _input__.readDouble()
        case 50 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __doubleVal += _input__.readDouble()
          }
          _input__.popLimit(oldLimit)
        }
        case 56 =>
          __intVal += _input__.readInt32()
        case 58 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __intVal += _input__.readInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 66 =>
          __stringVal += _input__.readBytes()
        case 77 =>
          __scomplexVal += _input__.readFloat()
        case 74 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __scomplexVal += _input__.readFloat()
          }
          _input__.popLimit(oldLimit)
        }
        case 80 =>
          __int64Val += _input__.readInt64()
        case 82 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __int64Val += _input__.readInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 88 =>
          __boolVal += _input__.readBool()
        case 90 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __boolVal += _input__.readBool()
          }
          _input__.popLimit(oldLimit)
        }
        case 97 =>
          __dcomplexVal += _input__.readDouble()
        case 98 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __dcomplexVal += _input__.readDouble()
          }
          _input__.popLimit(oldLimit)
        }
        case 114 =>
          __resourceHandleVal += _root_.scalapb.LiteParser.readMessage[org.tensorflow.framework.resource_handle.ResourceHandleProto](_input__)
        case 122 =>
          __variantVal += _root_.scalapb.LiteParser.readMessage[org.tensorflow.framework.tensor.VariantTensorDataProto](_input__)
        case 128 =>
          __uint32Val += _input__.readUInt32()
        case 130 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __uint32Val += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 136 =>
          __uint64Val += _input__.readUInt64()
        case 138 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __uint64Val += _input__.readUInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    org.tensorflow.framework.tensor.TensorProto(
        dtype = __dtype,
        tensorShape = __tensorShape,
        versionNumber = __versionNumber,
        tensorContent = __tensorContent,
        halfVal = __halfVal.result(),
        floatVal = __floatVal.result(),
        doubleVal = __doubleVal.result(),
        intVal = __intVal.result(),
        stringVal = __stringVal.result(),
        scomplexVal = __scomplexVal.result(),
        int64Val = __int64Val.result(),
        boolVal = __boolVal.result(),
        dcomplexVal = __dcomplexVal.result(),
        resourceHandleVal = __resourceHandleVal.result(),
        variantVal = __variantVal.result(),
        uint32Val = __uint32Val.result(),
        uint64Val = __uint64Val.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.tensor.TensorProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.framework.tensor.TensorProto(
        dtype = org.tensorflow.framework.types.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(org.tensorflow.framework.types.DataType.DT_INVALID.scalaValueDescriptor).number),
        tensorShape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto]]),
        versionNumber = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        tensorContent = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        halfVal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        floatVal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Float]]).getOrElse(_root_.scala.Seq.empty),
        doubleVal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Double]]).getOrElse(_root_.scala.Seq.empty),
        intVal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        stringVal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Seq[_root_.com.google.protobuf.ByteString]]).getOrElse(_root_.scala.Seq.empty),
        scomplexVal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[_root_.scala.Float]]).getOrElse(_root_.scala.Seq.empty),
        int64Val = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        boolVal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[_root_.scala.Boolean]]).getOrElse(_root_.scala.Seq.empty),
        dcomplexVal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Seq[_root_.scala.Double]]).getOrElse(_root_.scala.Seq.empty),
        resourceHandleVal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Seq[org.tensorflow.framework.resource_handle.ResourceHandleProto]]).getOrElse(_root_.scala.Seq.empty),
        variantVal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Seq[org.tensorflow.framework.tensor.VariantTensorDataProto]]).getOrElse(_root_.scala.Seq.empty),
        uint32Val = __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        uint64Val = __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TensorProtoCompanion.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TensorProtoCompanion.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = org.tensorflow.framework.tensor_shape.TensorShapeProto
      case 14 => __out = org.tensorflow.framework.resource_handle.ResourceHandleProto
      case 15 => __out = org.tensorflow.framework.tensor.VariantTensorDataProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => org.tensorflow.framework.types.DataType
    }
  }
  lazy val defaultInstance = org.tensorflow.framework.tensor.TensorProto(
    dtype = org.tensorflow.framework.types.DataType.DT_INVALID,
    tensorShape = _root_.scala.None,
    versionNumber = 0,
    tensorContent = _root_.com.google.protobuf.ByteString.EMPTY,
    halfVal = _root_.scala.Seq.empty,
    floatVal = _root_.scala.Seq.empty,
    doubleVal = _root_.scala.Seq.empty,
    intVal = _root_.scala.Seq.empty,
    stringVal = _root_.scala.Seq.empty,
    scomplexVal = _root_.scala.Seq.empty,
    int64Val = _root_.scala.Seq.empty,
    boolVal = _root_.scala.Seq.empty,
    dcomplexVal = _root_.scala.Seq.empty,
    resourceHandleVal = _root_.scala.Seq.empty,
    variantVal = _root_.scala.Seq.empty,
    uint32Val = _root_.scala.Seq.empty,
    uint64Val = _root_.scala.Seq.empty
  )
  implicit class TensorProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.tensor.TensorProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.tensor.TensorProto](_l) {
    def dtype: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.types.DataType] = field(_.dtype)((c_, f_) => c_.copy(dtype = f_))
    def tensorShape: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.tensor_shape.TensorShapeProto] = field(_.getTensorShape)((c_, f_) => c_.copy(tensorShape = Option(f_)))
    def optionalTensorShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto]] = field(_.tensorShape)((c_, f_) => c_.copy(tensorShape = f_))
    def versionNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.versionNumber)((c_, f_) => c_.copy(versionNumber = f_))
    def tensorContent: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.tensorContent)((c_, f_) => c_.copy(tensorContent = f_))
    def halfVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.halfVal)((c_, f_) => c_.copy(halfVal = f_))
    def floatVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Float]] = field(_.floatVal)((c_, f_) => c_.copy(floatVal = f_))
    def doubleVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Double]] = field(_.doubleVal)((c_, f_) => c_.copy(doubleVal = f_))
    def intVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.intVal)((c_, f_) => c_.copy(intVal = f_))
    def stringVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.com.google.protobuf.ByteString]] = field(_.stringVal)((c_, f_) => c_.copy(stringVal = f_))
    def scomplexVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Float]] = field(_.scomplexVal)((c_, f_) => c_.copy(scomplexVal = f_))
    def int64Val: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.int64Val)((c_, f_) => c_.copy(int64Val = f_))
    def boolVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Boolean]] = field(_.boolVal)((c_, f_) => c_.copy(boolVal = f_))
    def dcomplexVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Double]] = field(_.dcomplexVal)((c_, f_) => c_.copy(dcomplexVal = f_))
    def resourceHandleVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[org.tensorflow.framework.resource_handle.ResourceHandleProto]] = field(_.resourceHandleVal)((c_, f_) => c_.copy(resourceHandleVal = f_))
    def variantVal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[org.tensorflow.framework.tensor.VariantTensorDataProto]] = field(_.variantVal)((c_, f_) => c_.copy(variantVal = f_))
    def uint32Val: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.uint32Val)((c_, f_) => c_.copy(uint32Val = f_))
    def uint64Val: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.uint64Val)((c_, f_) => c_.copy(uint64Val = f_))
  }
  final val DTYPE_FIELD_NUMBER = 1
  final val TENSOR_SHAPE_FIELD_NUMBER = 2
  final val VERSION_NUMBER_FIELD_NUMBER = 3
  final val TENSOR_CONTENT_FIELD_NUMBER = 4
  final val HALF_VAL_FIELD_NUMBER = 13
  final val FLOAT_VAL_FIELD_NUMBER = 5
  final val DOUBLE_VAL_FIELD_NUMBER = 6
  final val INT_VAL_FIELD_NUMBER = 7
  final val STRING_VAL_FIELD_NUMBER = 8
  final val SCOMPLEX_VAL_FIELD_NUMBER = 9
  final val INT64_VAL_FIELD_NUMBER = 10
  final val BOOL_VAL_FIELD_NUMBER = 11
  final val DCOMPLEX_VAL_FIELD_NUMBER = 12
  final val RESOURCE_HANDLE_VAL_FIELD_NUMBER = 14
  final val VARIANT_VAL_FIELD_NUMBER = 15
  final val UINT32_VAL_FIELD_NUMBER = 16
  final val UINT64_VAL_FIELD_NUMBER = 17
  def of(
    dtype: org.tensorflow.framework.types.DataType,
    tensorShape: _root_.scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto],
    versionNumber: _root_.scala.Int,
    tensorContent: _root_.com.google.protobuf.ByteString,
    halfVal: _root_.scala.Seq[_root_.scala.Int],
    floatVal: _root_.scala.Seq[_root_.scala.Float],
    doubleVal: _root_.scala.Seq[_root_.scala.Double],
    intVal: _root_.scala.Seq[_root_.scala.Int],
    stringVal: _root_.scala.Seq[_root_.com.google.protobuf.ByteString],
    scomplexVal: _root_.scala.Seq[_root_.scala.Float],
    int64Val: _root_.scala.Seq[_root_.scala.Long],
    boolVal: _root_.scala.Seq[_root_.scala.Boolean],
    dcomplexVal: _root_.scala.Seq[_root_.scala.Double],
    resourceHandleVal: _root_.scala.Seq[org.tensorflow.framework.resource_handle.ResourceHandleProto],
    variantVal: _root_.scala.Seq[org.tensorflow.framework.tensor.VariantTensorDataProto],
    uint32Val: _root_.scala.Seq[_root_.scala.Int],
    uint64Val: _root_.scala.Seq[_root_.scala.Long]
  ): _root_.org.tensorflow.framework.tensor.TensorProto = _root_.org.tensorflow.framework.tensor.TensorProto(
    dtype,
    tensorShape,
    versionNumber,
    tensorContent,
    halfVal,
    floatVal,
    doubleVal,
    intVal,
    stringVal,
    scomplexVal,
    int64Val,
    boolVal,
    dcomplexVal,
    resourceHandleVal,
    variantVal,
    uint32Val,
    uint64Val
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tensorflow.TensorProto])
}
