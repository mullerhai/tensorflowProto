// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.tensorflow.framework.types

/** LINT.IfChange
  */
sealed abstract class DataType(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = DataType
  def isDtInvalid: _root_.scala.Boolean = false
  def isDtFloat: _root_.scala.Boolean = false
  def isDtDouble: _root_.scala.Boolean = false
  def isDtInt32: _root_.scala.Boolean = false
  def isDtUint8: _root_.scala.Boolean = false
  def isDtInt16: _root_.scala.Boolean = false
  def isDtInt8: _root_.scala.Boolean = false
  def isDtString: _root_.scala.Boolean = false
  def isDtComplex64: _root_.scala.Boolean = false
  def isDtInt64: _root_.scala.Boolean = false
  def isDtBool: _root_.scala.Boolean = false
  def isDtQint8: _root_.scala.Boolean = false
  def isDtQuint8: _root_.scala.Boolean = false
  def isDtQint32: _root_.scala.Boolean = false
  def isDtBfloat16: _root_.scala.Boolean = false
  def isDtQint16: _root_.scala.Boolean = false
  def isDtQuint16: _root_.scala.Boolean = false
  def isDtUint16: _root_.scala.Boolean = false
  def isDtComplex128: _root_.scala.Boolean = false
  def isDtHalf: _root_.scala.Boolean = false
  def isDtResource: _root_.scala.Boolean = false
  def isDtVariant: _root_.scala.Boolean = false
  def isDtUint32: _root_.scala.Boolean = false
  def isDtUint64: _root_.scala.Boolean = false
  def isDtFloatRef: _root_.scala.Boolean = false
  def isDtDoubleRef: _root_.scala.Boolean = false
  def isDtInt32Ref: _root_.scala.Boolean = false
  def isDtUint8Ref: _root_.scala.Boolean = false
  def isDtInt16Ref: _root_.scala.Boolean = false
  def isDtInt8Ref: _root_.scala.Boolean = false
  def isDtStringRef: _root_.scala.Boolean = false
  def isDtComplex64Ref: _root_.scala.Boolean = false
  def isDtInt64Ref: _root_.scala.Boolean = false
  def isDtBoolRef: _root_.scala.Boolean = false
  def isDtQint8Ref: _root_.scala.Boolean = false
  def isDtQuint8Ref: _root_.scala.Boolean = false
  def isDtQint32Ref: _root_.scala.Boolean = false
  def isDtBfloat16Ref: _root_.scala.Boolean = false
  def isDtQint16Ref: _root_.scala.Boolean = false
  def isDtQuint16Ref: _root_.scala.Boolean = false
  def isDtUint16Ref: _root_.scala.Boolean = false
  def isDtComplex128Ref: _root_.scala.Boolean = false
  def isDtHalfRef: _root_.scala.Boolean = false
  def isDtResourceRef: _root_.scala.Boolean = false
  def isDtVariantRef: _root_.scala.Boolean = false
  def isDtUint32Ref: _root_.scala.Boolean = false
  def isDtUint64Ref: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[DataType] = org.tensorflow.framework.types.DataType
  final def asRecognized: _root_.scala.Option[org.tensorflow.framework.types.DataType.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[org.tensorflow.framework.types.DataType.Recognized])
}

object DataType extends _root_.scalapb.GeneratedEnumCompanion[DataType] {
  sealed trait Recognized extends DataType
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[DataType] = this
  /** Not a legal value for DataType.  Used to indicate a DataType field
    * has not been set.
    */
  @SerialVersionUID(0L)
  case object DT_INVALID extends DataType(0) with DataType.Recognized {
    val index = 0
    val name = "DT_INVALID"
    override def isDtInvalid: _root_.scala.Boolean = true
  }
  
  /** Data types that all computation devices are expected to be
    * capable to support.
    */
  @SerialVersionUID(0L)
  case object DT_FLOAT extends DataType(1) with DataType.Recognized {
    val index = 1
    val name = "DT_FLOAT"
    override def isDtFloat: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_DOUBLE extends DataType(2) with DataType.Recognized {
    val index = 2
    val name = "DT_DOUBLE"
    override def isDtDouble: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_INT32 extends DataType(3) with DataType.Recognized {
    val index = 3
    val name = "DT_INT32"
    override def isDtInt32: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_UINT8 extends DataType(4) with DataType.Recognized {
    val index = 4
    val name = "DT_UINT8"
    override def isDtUint8: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_INT16 extends DataType(5) with DataType.Recognized {
    val index = 5
    val name = "DT_INT16"
    override def isDtInt16: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_INT8 extends DataType(6) with DataType.Recognized {
    val index = 6
    val name = "DT_INT8"
    override def isDtInt8: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_STRING extends DataType(7) with DataType.Recognized {
    val index = 7
    val name = "DT_STRING"
    override def isDtString: _root_.scala.Boolean = true
  }
  
  /** Single-precision complex
    */
  @SerialVersionUID(0L)
  case object DT_COMPLEX64 extends DataType(8) with DataType.Recognized {
    val index = 8
    val name = "DT_COMPLEX64"
    override def isDtComplex64: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_INT64 extends DataType(9) with DataType.Recognized {
    val index = 9
    val name = "DT_INT64"
    override def isDtInt64: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_BOOL extends DataType(10) with DataType.Recognized {
    val index = 10
    val name = "DT_BOOL"
    override def isDtBool: _root_.scala.Boolean = true
  }
  
  /** Quantized int8
    */
  @SerialVersionUID(0L)
  case object DT_QINT8 extends DataType(11) with DataType.Recognized {
    val index = 11
    val name = "DT_QINT8"
    override def isDtQint8: _root_.scala.Boolean = true
  }
  
  /** Quantized uint8
    */
  @SerialVersionUID(0L)
  case object DT_QUINT8 extends DataType(12) with DataType.Recognized {
    val index = 12
    val name = "DT_QUINT8"
    override def isDtQuint8: _root_.scala.Boolean = true
  }
  
  /** Quantized int32
    */
  @SerialVersionUID(0L)
  case object DT_QINT32 extends DataType(13) with DataType.Recognized {
    val index = 13
    val name = "DT_QINT32"
    override def isDtQint32: _root_.scala.Boolean = true
  }
  
  /** Float32 truncated to 16 bits.  Only for cast ops.
    */
  @SerialVersionUID(0L)
  case object DT_BFLOAT16 extends DataType(14) with DataType.Recognized {
    val index = 14
    val name = "DT_BFLOAT16"
    override def isDtBfloat16: _root_.scala.Boolean = true
  }
  
  /** Quantized int16
    */
  @SerialVersionUID(0L)
  case object DT_QINT16 extends DataType(15) with DataType.Recognized {
    val index = 15
    val name = "DT_QINT16"
    override def isDtQint16: _root_.scala.Boolean = true
  }
  
  /** Quantized uint16
    */
  @SerialVersionUID(0L)
  case object DT_QUINT16 extends DataType(16) with DataType.Recognized {
    val index = 16
    val name = "DT_QUINT16"
    override def isDtQuint16: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_UINT16 extends DataType(17) with DataType.Recognized {
    val index = 17
    val name = "DT_UINT16"
    override def isDtUint16: _root_.scala.Boolean = true
  }
  
  /** Double-precision complex
    */
  @SerialVersionUID(0L)
  case object DT_COMPLEX128 extends DataType(18) with DataType.Recognized {
    val index = 18
    val name = "DT_COMPLEX128"
    override def isDtComplex128: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_HALF extends DataType(19) with DataType.Recognized {
    val index = 19
    val name = "DT_HALF"
    override def isDtHalf: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_RESOURCE extends DataType(20) with DataType.Recognized {
    val index = 20
    val name = "DT_RESOURCE"
    override def isDtResource: _root_.scala.Boolean = true
  }
  
  /** Arbitrary C++ data types
    */
  @SerialVersionUID(0L)
  case object DT_VARIANT extends DataType(21) with DataType.Recognized {
    val index = 21
    val name = "DT_VARIANT"
    override def isDtVariant: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_UINT32 extends DataType(22) with DataType.Recognized {
    val index = 22
    val name = "DT_UINT32"
    override def isDtUint32: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_UINT64 extends DataType(23) with DataType.Recognized {
    val index = 23
    val name = "DT_UINT64"
    override def isDtUint64: _root_.scala.Boolean = true
  }
  
  /** Do not use!  These are only for parameters.  Every enum above
    * should have a corresponding value below (verified by types_test).
    */
  @SerialVersionUID(0L)
  case object DT_FLOAT_REF extends DataType(101) with DataType.Recognized {
    val index = 24
    val name = "DT_FLOAT_REF"
    override def isDtFloatRef: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_DOUBLE_REF extends DataType(102) with DataType.Recognized {
    val index = 25
    val name = "DT_DOUBLE_REF"
    override def isDtDoubleRef: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_INT32_REF extends DataType(103) with DataType.Recognized {
    val index = 26
    val name = "DT_INT32_REF"
    override def isDtInt32Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_UINT8_REF extends DataType(104) with DataType.Recognized {
    val index = 27
    val name = "DT_UINT8_REF"
    override def isDtUint8Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_INT16_REF extends DataType(105) with DataType.Recognized {
    val index = 28
    val name = "DT_INT16_REF"
    override def isDtInt16Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_INT8_REF extends DataType(106) with DataType.Recognized {
    val index = 29
    val name = "DT_INT8_REF"
    override def isDtInt8Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_STRING_REF extends DataType(107) with DataType.Recognized {
    val index = 30
    val name = "DT_STRING_REF"
    override def isDtStringRef: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_COMPLEX64_REF extends DataType(108) with DataType.Recognized {
    val index = 31
    val name = "DT_COMPLEX64_REF"
    override def isDtComplex64Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_INT64_REF extends DataType(109) with DataType.Recognized {
    val index = 32
    val name = "DT_INT64_REF"
    override def isDtInt64Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_BOOL_REF extends DataType(110) with DataType.Recognized {
    val index = 33
    val name = "DT_BOOL_REF"
    override def isDtBoolRef: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_QINT8_REF extends DataType(111) with DataType.Recognized {
    val index = 34
    val name = "DT_QINT8_REF"
    override def isDtQint8Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_QUINT8_REF extends DataType(112) with DataType.Recognized {
    val index = 35
    val name = "DT_QUINT8_REF"
    override def isDtQuint8Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_QINT32_REF extends DataType(113) with DataType.Recognized {
    val index = 36
    val name = "DT_QINT32_REF"
    override def isDtQint32Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_BFLOAT16_REF extends DataType(114) with DataType.Recognized {
    val index = 37
    val name = "DT_BFLOAT16_REF"
    override def isDtBfloat16Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_QINT16_REF extends DataType(115) with DataType.Recognized {
    val index = 38
    val name = "DT_QINT16_REF"
    override def isDtQint16Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_QUINT16_REF extends DataType(116) with DataType.Recognized {
    val index = 39
    val name = "DT_QUINT16_REF"
    override def isDtQuint16Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_UINT16_REF extends DataType(117) with DataType.Recognized {
    val index = 40
    val name = "DT_UINT16_REF"
    override def isDtUint16Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_COMPLEX128_REF extends DataType(118) with DataType.Recognized {
    val index = 41
    val name = "DT_COMPLEX128_REF"
    override def isDtComplex128Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_HALF_REF extends DataType(119) with DataType.Recognized {
    val index = 42
    val name = "DT_HALF_REF"
    override def isDtHalfRef: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_RESOURCE_REF extends DataType(120) with DataType.Recognized {
    val index = 43
    val name = "DT_RESOURCE_REF"
    override def isDtResourceRef: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_VARIANT_REF extends DataType(121) with DataType.Recognized {
    val index = 44
    val name = "DT_VARIANT_REF"
    override def isDtVariantRef: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_UINT32_REF extends DataType(122) with DataType.Recognized {
    val index = 45
    val name = "DT_UINT32_REF"
    override def isDtUint32Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DT_UINT64_REF extends DataType(123) with DataType.Recognized {
    val index = 46
    val name = "DT_UINT64_REF"
    override def isDtUint64Ref: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends DataType(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  
  lazy val values = scala.collection.immutable.Seq(DT_INVALID, DT_FLOAT, DT_DOUBLE, DT_INT32, DT_UINT8, DT_INT16, DT_INT8, DT_STRING, DT_COMPLEX64, DT_INT64, DT_BOOL, DT_QINT8, DT_QUINT8, DT_QINT32, DT_BFLOAT16, DT_QINT16, DT_QUINT16, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_RESOURCE, DT_VARIANT, DT_UINT32, DT_UINT64, DT_FLOAT_REF, DT_DOUBLE_REF, DT_INT32_REF, DT_UINT8_REF, DT_INT16_REF, DT_INT8_REF, DT_STRING_REF, DT_COMPLEX64_REF, DT_INT64_REF, DT_BOOL_REF, DT_QINT8_REF, DT_QUINT8_REF, DT_QINT32_REF, DT_BFLOAT16_REF, DT_QINT16_REF, DT_QUINT16_REF, DT_UINT16_REF, DT_COMPLEX128_REF, DT_HALF_REF, DT_RESOURCE_REF, DT_VARIANT_REF, DT_UINT32_REF, DT_UINT64_REF)
  def fromValue(__value: _root_.scala.Int): DataType = __value match {
    case 0 => DT_INVALID
    case 1 => DT_FLOAT
    case 2 => DT_DOUBLE
    case 3 => DT_INT32
    case 4 => DT_UINT8
    case 5 => DT_INT16
    case 6 => DT_INT8
    case 7 => DT_STRING
    case 8 => DT_COMPLEX64
    case 9 => DT_INT64
    case 10 => DT_BOOL
    case 11 => DT_QINT8
    case 12 => DT_QUINT8
    case 13 => DT_QINT32
    case 14 => DT_BFLOAT16
    case 15 => DT_QINT16
    case 16 => DT_QUINT16
    case 17 => DT_UINT16
    case 18 => DT_COMPLEX128
    case 19 => DT_HALF
    case 20 => DT_RESOURCE
    case 21 => DT_VARIANT
    case 22 => DT_UINT32
    case 23 => DT_UINT64
    case 101 => DT_FLOAT_REF
    case 102 => DT_DOUBLE_REF
    case 103 => DT_INT32_REF
    case 104 => DT_UINT8_REF
    case 105 => DT_INT16_REF
    case 106 => DT_INT8_REF
    case 107 => DT_STRING_REF
    case 108 => DT_COMPLEX64_REF
    case 109 => DT_INT64_REF
    case 110 => DT_BOOL_REF
    case 111 => DT_QINT8_REF
    case 112 => DT_QUINT8_REF
    case 113 => DT_QINT32_REF
    case 114 => DT_BFLOAT16_REF
    case 115 => DT_QINT16_REF
    case 116 => DT_QUINT16_REF
    case 117 => DT_UINT16_REF
    case 118 => DT_COMPLEX128_REF
    case 119 => DT_HALF_REF
    case 120 => DT_RESOURCE_REF
    case 121 => DT_VARIANT_REF
    case 122 => DT_UINT32_REF
    case 123 => DT_UINT64_REF
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = TypesProto.javaDescriptor.getEnumTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = TypesProto.scalaDescriptor.enums(0)
}